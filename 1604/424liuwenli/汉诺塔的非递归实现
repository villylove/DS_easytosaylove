#include <stdio.h>
#define MAX 100

//用来表示每根柱子的信息
typedef struct st
{
    int s[MAX]; //柱子上的圆盘存储情况
    int top; //栈顶，最上面的圆盘
    char name; //柱子的名字，可以是A，B，C中的一个
}st;
int Top(st *L)//取栈顶元素
{
    int a=L->top;
    return L->s[a];
}
int Pop(st *L)//出栈
{
    int a=(L->top)--;
    return L->s[a];
}
void Push(st *L,int x)//入栈
{
    int a=++(L->top);
    L->s[a] = x;
}

long Pow(int x, int y); //计算x^y
void Creat(st *ta[], int n); //给结构数组设置初值
void Hanoi(st *ta[], long max); //移动汉诺塔的主要函数

int main(void)
{
      int n;
      printf("请输入圆盘的个数:\n");
      scanf("%d",&n); //输入圆盘的个数
      st *ta[3]; //三根柱子的信息用结构数组存储
      Creat(ta, n); //给结构数组设置初值

      long max = Pow(2, n) - 1;//动的次数应等于2^n - 1
     Hanoi(ta, max);//移动汉诺塔的主要函数
     return 0;
}

void Creat(st *ta[], int n)
{
    ta[0]->name = 'A';
    ta[0]->top = n-1;
    int i;
     //把所有的圆盘按从大到小的顺序放在柱子A上
    for (i=0;i<n;i++)
    {
        ta[0]->s[i]=n-i;
    }
      //柱子B，C上开始没有没有圆盘
    ta[1]->top = ta[2]->top = 0;
    for (i=0; i<n; i++)
    {
        ta[1]->s[i]=ta[2]->s[i]=0;
    }
     //若n为偶数，按顺时针方向依次摆放 A B C
      if (n%2 == 0)
      {
            ta[1]->name = 'B';
            ta[2]->name = 'C';
      }
      else  //若n为奇数，按顺时针方向依次摆放 A C B
      {
            ta[1]->name = 'C';
            ta[2]->name = 'B';
      }
}

long Pow(int x, int y)
{
    int i;
      long sum = 1;
      for (i=0; i<y; i++)
            sum *= x;
      return sum;
}

void Hanoi(st *ta[], long max)
{
  int k = 0; //累计移动的次数
  int i = 0;
  int ch;
  while (k < max)
  {
    //按顺时针方向把圆盘1从现在的柱子移动到下一根柱子
    ch = Pop(ta[i%3]);
   Push(ta[(i+1)%3],ch);
   printf("%d: Move disk %d from %c to %c \n",++k,ch,ta[i%3]->name,ta[(i+1)%3]->name);
   i++;
   //把另外两根柱子上可以移动的圆盘移动到新的柱子上
   if (k < max)
   {
    //把非空柱子上的圆盘移动到空柱子上，当两根柱子都为空时，移动较小的圆盘
    if (Top(ta[(i+1)%3])==0||Top(ta[(i-1)%3])>0&&Top(ta[(i+1)%3])>Top(ta[(i-1)%3]))
   {
        ch =  Pop(ta[(i-1)%3]);
        Push(ta[(i+1)%3],ch);
        printf("%d: Move disk %d from %c to %c \n",++k,ch,ta[(i-1)%3]->name,ta[(i+1)%3]->name);
    }
   else
    {
       ch =  Pop(ta[(i+1)%3]);
       Push(ta[(i-1)%3],ch);
       printf("%d: Move disk %d from %c to %c \n",++k,ch,ta[(i+1)%3]->name,ta[(i-1)%3]->name);
    }
   }
  }
}
